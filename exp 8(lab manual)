//Lab experiment 8
#include <stdio.h>
#include <stdlib.h>

struct Node{
    struct Node* prev;
    int data; 
    struct Node* next;
};
struct Node* head=NULL;
struct Node* createNode(int ele){
    struct Node* temp=(struct Node*)malloc(sizeof(struct Node));
    temp->data=ele;
    temp->prev=temp->next=NULL;
    return temp;
}
void insertNodeInBeg(int ele){
    struct Node* newnode=createNode(ele);
    if(head == NULL){
        head =newnode;
    }
    else{
        newnode->next=head;
        head->prev=newnode;
        head=newnode;
    }
}
void insertNodeInEnd(int ele){
    struct Node* newnode=createNode(ele);
    if(head == NULL){
        head = newnode;
    }
    else{
        struct Node* temp = head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=newnode;
        newnode->prev=temp;
    }
}
void insertNodeAtanyPos(int ele, int pos)
{
    if (head == NULL && pos != 1)
    {
        printf("List is empty !!!\n");
    }
    else if (pos == 1)
    {
        insertNodeInBeg(ele);
    }
    else
    {
        struct Node* newNode =createNode(ele);
        newNode->data = ele;
        newNode->next = NULL;
        struct Node* temp = head;
        int i = 1;
        while (i < pos  && temp->next != NULL)
        {
            temp = temp->next;
            i++;
        }
        if (temp->next != NULL && i > 1)
        {
            newNode->next = temp;
            newNode->prev = temp->prev;
            temp->prev->next=newNode;
            temp->prev=newNode;
            printf("Node Inserted !!!\n");
        }
        else
        {
            printf("Invalid Position!!!\n");
        }
    }
}

void deleteNodefrombeg(){
    struct Node* temp = head;
    if(head==NULL){
        printf("Empty list!!\n");
    }
    else{
        head=head->next;
        if(head != NULL){
            head->prev=NULL;
        }
        free(temp);
        printf("Node Deleted !!\n");
    }
}

void deleteNodefromEnd(){
    struct Node* temp = head;
    if(head==NULL){
        printf("Empty list!!\n");
    }
    else{
        while(temp->next != NULL){
            temp=temp->next;
        }
        if(temp->prev != NULL){
            temp->prev->next=NULL;
        }
        else{
            head=NULL;
        }
        free(temp);
        printf("Node DEleted !!!\n");
    }
}

void deleteNodefromanyPos(int p){
    struct Node* temp = head;
    if(head==NULL){
        printf("Empty list!!\n");
    }
    else if(p==1){
        deleteNodefrombeg();
    }
    else{
        int i=1;
        while(i!=p && temp != NULL){
            temp=temp->next;
            i++;
        }
        temp->prev->next=temp->next;
        if(temp->next != NULL){
            temp->next->prev=temp->prev;
        }
        free(temp);
        printf("Node Deleted !!!\n");
    }
}

void search(int target)
{
    if (head == NULL)
        printf("List is empty !!!\n");
    else
    {
        struct Node* temp = head;
        while (temp != NULL)
        {
            if (temp->data == target)
            {
                printf("Found !!!\n");
                return;
            }
            temp = temp->next;
        }
        printf("Not Found!!!!\n");
    }
}

void display()
{
    if (head == NULL)
    {
        printf("List is empty !!!\n");
    }
    else
    {
        printf("Elements are : \n");
        struct Node* temp = head;
        while (temp != NULL)
        {
            printf("%d ", temp->data);
            temp = temp->next;
        }
    }
    printf("\n\n");
}

int main()
{
    while (1)
    {
        printf("----- Doubly Linked List -----\n");
        printf("1. Insert Node at beginning\n2. Insert Node at end\n3. Insert Node at any position\n4. Delete Node from beginning\n5. Delete Node from end\n6. Delete Node from any position\n7. Search elements\n8. Display List\n9. Exit\n\n");
        int choice, ele, pos,target;
        printf("Enter choice : ");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
            printf("Enter the element : ");
            scanf("%d", &ele);
            insertNodeInBeg(ele);
            break;
        case 2:
            printf("Enter the element : ");
            scanf("%d", &ele);
            insertNodeInEnd(ele);
            break;
        case 3:
            printf("Enter the element : ");
            scanf("%d", &ele);
            printf("Enter the poitioin : ");
            scanf("%d", &pos);
            insertNodeAtanyPos(ele, pos);
            break;
        case 4:
            deleteNodefrombeg();
            break;
        case 5:
            deleteNodefromEnd();
            break;
        case 6:
            printf("Enter position : ");
            scanf("%d", &pos);
            deleteNodefromanyPos(pos);
            break;
        case 7:
            printf("Enter element : ");
            scanf("%d", &target);
            search(target);
            break;
        case 8:
            display();
            break;
        case 9:
            exit(0);
        default:
            printf("Invalid Choice !!!\n");
        }
    }
}
