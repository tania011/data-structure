#include<stdio.h>

#include<stdlib.h>

#define MAX 100

int tree[MAX];

 

  void init(){

    for(int i =0;i<MAX;i++){

    tree[i]=-1;

    }

  }

    void insert(int n,int root){ // how many nodes to be inserted

       if(tree[root]==-1)

       tree[root]=n;

       else if(n<tree[root])// if only else is used then duplicate data can pass

       insert(n,2*root+1);

       else if(n>tree[root])

       insert(n,2*root+2);

    }

    void preorder(int root){

        if(tree[root]==-1)

        return ;

        printf("%d ",tree[root]); //visit child

        preorder(2*root+1);//left child

        preorder(2*root+2); // right child

    }

    void inorder(int root){

        if(tree[root]==-1)

        return ;

       

        inorder(2*root+1);//left child

        printf("%d ",tree[root]);

        inorder(2*root+2); // right child

    }

    void postorder(int root){

        if(tree[root]==-1)

        return ;

       

        postorder(2*root+1);//left child

        postorder(2*root+2); // right child

        printf("%d ",tree[root]);

       

    }

    int search(int i,int target){

       while(i<MAX && tree[i]!=-1) {

        if(tree[i]==target)

        return i;

        else if(target<tree[i])

        i=2*i+1;

        else

        i=2*i+2;

       }

        return -1;

    }

    int findMin(int i){ // through array

      while(i<MAX && tree[2*i+1]!=-1){//minimum is in lefi side

        i=2*i+1;

      }

      return i;

    }

    int findMax(int i){ // through array

      while(i<MAX &&tree[2*i+2]!=-1){// maximum is on right side

        i=2*i+2;

      }

      return i;

    }

    void delete(int i , int  value){ // jo number doge wahin se start hoga

         i=search(i,value);// jis value ko delete karna hai uska index

        if(i==-1)

        printf("Element not found !!!!\n");

        else{

           int left=2*i+1;

           int right=2*i+2;

           if((left>=MAX || tree[left]==-1) && (right>=MAX || tree[right]==-1 ))// having zero child

          tree[i] =-1;

          

          else if(tree[right]==-1){// having left child only

              int max=findMax(left);

              tree[i]=tree[max];

              delete(max,tree[max]);

          }

        else{// having 2 children or having right child only

          int min = findMin(right);

            tree[i]=tree[min];

            delete(min,tree[min]);

          }

        }

            

        }

    

int main(){

    init();

    int n,choice,index;

   while(1){

    printf("1. Insert\n");

    printf("2. Preorder\n");

    printf("3. Inorder\n");

    printf("4. Postorder\n");

    printf("5.Search\n");

    printf("6.Delete\n");

    printf("7.Exit\n");

    printf("Enter Choice");

    scanf("%d",&choice);

  switch(choice){

    case 1:

    printf("Enter the value  : ");

    scanf("%d",&n);

    insert(n,0);

    printf("Element Inserted !!!\n");

    break;

    case 2:

    printf("\n Pre-Order: ");

    preorder(0);

    break;

    case 3:

    printf("\n In-Order: ");

    inorder(0);

    break;

    case 4:

    printf("\n Post-Order: ");

    postorder(0);

    break;

    case 5:

    printf("Enter Value : ");

    scanf("%d",&n);

    index=search(0,n);

    if(index ==-1)

    printf("Not Found !!!!\n");

    else

    printf("Found!!!\n");

    break;

  case 6:

  printf("Enter Value: ");

  scanf("%d",&n);

  delete(0,n);

  break;

  case 7:

        exit(0);

         break;

         default:

      printf("Invalid Choice !!!!\n");

        }

        printf("\n");

        system("pause"); // without pressing system will not work

 }

return 0;

}

